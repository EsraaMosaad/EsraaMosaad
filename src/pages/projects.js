import AnimatedText from "@/components/AnimatedText";
import Layout from "@/components/Layout";
import React, { useState } from "react";
import Link from "next/link";
import Head from "next/head";
import { GithubIcon } from "@/components/Icons";
import { motion } from 'framer-motion';
import Image from "next/image";
import TransitionEffect from "@/components/TransitionEffect";
import projectsData from "@/components/projectsData";

const FramerImage = motion(Image);

{/*const Project = ({ types, title, img, link, github }) => {
    return (
        <article className="w-full flex flex-col items-center justify-center rounded-br-2xl rounded-2xl border border-solid border-dark bg-light p-6 relative dark:bg-dark dark:border-light xs:p-4">
            <div className="absolute top-0 -right-3 -z-10 w-[100%] h-[102%] rounded-[2rem] rounded-br-2xl bg-dark dark:bg-light md:-right-2 md:w-full xs:h-[102%] xs:rounded-[1.5rem]" />
            <Link href={link} target="_blank" className="w-full cursor-pointer overflow-hidden rounded-lg">
                <FramerImage src={img} alt={title} className="w-full h-auto" whileHover={{ scale: 1.05 }} transition={{ duration: 0.2 }} priority sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 50vw" />
            </Link>
            <div className="w-full flex flex-col items-start justify-between mt-4">
                <span className="text-primary font-medium text-xl dark:text-primaryDark lg:text-lg md:text-base">{types.join(', ')}</span>
                <Link href={link} target="_blank" className="hover:underline underline-offset-2">
                    <h2 className="my-2 w-full text-left font-bold text-3xl lg:text-2xl">{title}</h2>
                </Link>
                <div className="w-full mt-2 flex items-center justify-between">
                    <Link href={link} target="_blank" className="text-lg font-semibold underline text-dark/75 dark:text-light/75 md:text-base">Visit</Link>
                    <Link href={github} target="_blank" className="w-8 md:w-6"><GithubIcon /></Link>
                </div>
            </div>
        </article>
    );
}*/}
const Project = ({ types, title, img, link, github }) => {
    return (
        <article className="w-full flex flex-col items-center justify-center rounded-br-2xl rounded-2xl border border-solid border-dark bg-light p-6 relative dark:bg-dark dark:border-light xs:p-4">
            <div className="absolute top-0 -right-3 -z-10 w-[100%] h-[102%] rounded-[2rem] rounded-br-2xl bg-dark dark:bg-light md:-right-2 md:w-full xs:h-[102%] xs:rounded-[1.5rem]" />
            <Link href={link} target="_blank" className="w-full cursor-pointer overflow-hidden rounded-lg">
                <FramerImage src={img} alt={title} className="w-full h-auto" whileHover={{ scale: 1.05 }} transition={{ duration: 0.2 }} priority sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 50vw" />
            </Link>
            <div className="w-full flex flex-col items-start justify-between mt-4">
                <span className="text-primary font-medium text-xl dark:text-primaryDark lg:text-lg md:text-base">{types.join(', ')}</span>
                <Link href={link} target="_blank" className="hover:underline underline-offset-2">
                    <h2 className="my-2 w-full text-left font-bold text-3xl lg:text-2xl">{title}</h2>
                </Link>
                <div className="w-full mt-2 flex items-center justify-between">

                    {github && ( // شرط لإظهار أيقونة GitHub فقط إذا كان الرابط موجودًا
                        <Link href={github} target="_blank" className="w-8 md:w-6">
                            <GithubIcon />
                        </Link>
                    )}

                    {link && ( // شرط لإظهار أيقونة link فقط إذا كان الرابط موجودًا
                        <Link href={link} target="_blank" className="text-lg font-semibold underline text-dark/75 dark:text-light/75 md:text-base">Visit</Link>)}

                </div>
            </div>
        </article>
    );
}


const Projects = () => {
    const [filter, setFilter] = useState([]);
    const [dropdownOpen, setDropdownOpen] = useState(false);
    const uniqueTypes = [...new Set(projectsData.flatMap(project => project.types))];

    const handleFilterChange = (type) => {
        if (filter.includes(type)) {
            setFilter(filter.filter(f => f !== type));
        } else {
            setFilter([...filter, type]);
        }
    };

    const filteredProjects = projectsData.filter(project => {
        return filter.length === 0 || project.types.some(t => filter.includes(t));
    });

    return (
        <>
            <Head>
                <title>EsraaAbdelrazek | Projects Page</title>
                <meta name="description" content="Generated by create next app" />
            </Head>



            <TransitionEffect />
            <main className="flex w-full mb-16 flex-col items-center justify-center dark:text-light">
                <Layout className="pt-16">
                    <AnimatedText text={'Imagination Trumps Knowledge!'} className="mb-16 lg:!text-7xl sm:!text-6xl sm:!mb-8 xs:!text-4xl" />

                    {/* Dropdown Filter Button */}
                    <div className="flex items-center justify-center mt-4 mb-16">
                        <div className="relative inline-block text-left z-10">
                            <button
                                onClick={() => setDropdownOpen(!dropdownOpen)}
                                className="inline-flex justify-center w-full px-4 py-2 bg-gray-300 dark:bg-gray-700 text-dark dark:text-light rounded-md focus:outline-none"
                            >
                                Filter Projects
                            </button>

                            {dropdownOpen && (
                                <div className="origin-top-right absolute left-1/2 transform -translate-x-1/2 mt-2 w-56 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 focus:outline-none">
                                    <div className="py-1">
                                        {uniqueTypes.map((type, index) => (
                                            <label key={index} className="flex items-center px-4 py-2 text-sm text-dark dark:text-light cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600">
                                                <input
                                                    type="checkbox"
                                                    checked={filter.includes(type)}
                                                    onChange={() => handleFilterChange(type)}
                                                    className="mr-2"
                                                />
                                                {type}
                                            </label>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>

                    <div className="grid grid-cols-12 gap-24 gap-y-32 xl:gap-x-16 lg:gap-x-8 md:gap-y-24 sm:gap-x-0">
                        {filteredProjects.map((project, index) => (
                            <div key={index} className="col-span-6 sm:col-span-12">
                                <Project
                                    types={project.types}
                                    title={project.title}
                                    img={project.img}
                                    link={project.link}
                                    github={project.github}
                                />
                            </div>
                        ))}
                    </div>
                </Layout>
            </main>
        </>
    );
};

export default Projects;
